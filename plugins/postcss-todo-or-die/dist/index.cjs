"use strict";var e=require("@csstools/css-tokenizer"),n=require("@csstools/css-parser-algorithms"),o=require("browserslist");const t=[e.TokenType.Ident,e.TokenType.Number,e.TokenType.Percentage,e.TokenType.Dimension],r=["<",">","="];function parseIfCondition(o){const s=o.value.filter((e=>!n.isWhitespaceNode(e)&&!n.isCommentNode(e)));if(s.length>3)return!1;const i=s[0],a=s[1],u=s[2];if(!i||!a||!u)return!1;if(!n.isTokenNode(i)||!n.isTokenNode(a)||!n.isTokenNode(u))return!1;const c=i.value,l=a.value,d=u.value;return l[0]===e.TokenType.Delim&&(!!r.includes(l[4].value)&&(!!t.includes(c[0])&&(!!t.includes(d[0])&&{a:c,b:d,operator:l[4].value})))}function parseNotCondition(e){const n=parseIfCondition(e);return!!n&&{a:n.a,b:n.b,operator:n.operator}}function matchIfCondition(n){const o=n.a,t=n.b;if(o[0]===t[0]&&(o[0]!==e.TokenType.Dimension||t[0]!==e.TokenType.Dimension||o[4].unit.toLowerCase()===t[4].unit.toLowerCase())){switch(n.operator){case"<":if(o[4].value>=t[4].value)return`Died because A (${o[1]}) is no longer less than B (${t[1]})`;break;case">":if(o[4].value<=t[4].value)return`Died because A (${o[1]}) is no longer greater than B (${t[1]})`;break;case"=":if(o[4].value!==t[4].value)return`Died because A (${o[1]}) is no longer equal to B (${t[1]})`}return!0}}function matchNotCondition(n){const o=n.a,t=n.b;if(o[0]===t[0]&&(o[0]!==e.TokenType.Dimension||t[0]!==e.TokenType.Dimension||o[4].unit.toLowerCase()===t[4].unit.toLowerCase())){switch(n.operator){case"<":if(o[4].value<t[4].value)return`Died because A (${o[1]}) is less than B (${t[1]})`;break;case">":if(o[4].value>t[4].value)return`Died because A (${o[1]}) is greater than B (${t[1]})`;break;case"=":if(o[4].value===t[4].value)return`Died because A (${o[1]}) equals B (${t[1]})`}return!0}}function parseBrowserslistCondition(o){const t=o.value.filter((e=>!n.isWhitespaceNode(e)&&!n.isCommentNode(e)));if(t.length>1)return!1;const r=t[0];if(!r)return!1;if(!n.isTokenNode(r))return!1;const s=r.value;return s[0]===e.TokenType.String&&s[4].value}function matchBrowserslistCondition(e,n){const t=o(e);for(let e=0;e<t.length;e++){const o=t[e];if(n.has(o))return!0}return`Died because the browsers matching "${e}" do not have any overlap with your project browserslist`}function died(e){return"string"==typeof e}function parseBeforeDateCondition(o){const t=o.value.filter((e=>!n.isWhitespaceNode(e)&&!n.isCommentNode(e)));if(t.length>3)return!1;const r=t[0],s=t[1],i=t[2];if(!r||!s||!i)return!1;if(!n.isTokenNode(r)||!n.isTokenNode(s)||!n.isTokenNode(i))return!1;const a=r.value,u=s.value,c=i.value;return a[0]===e.TokenType.Number&&a[4].type===e.NumberType.Integer&&(u[0]===e.TokenType.Number&&u[4].type===e.NumberType.Integer&&(c[0]===e.TokenType.Number&&c[4].type===e.NumberType.Integer&&{year:a[4].value,month:u[4].value,day:c[4].value}))}function matchBeforeDateCondition(e,n,o){const t=new Date;t.setUTCFullYear(e),t.setUTCMonth(n),t.setUTCDate(o);return(new Date).getTime()<t.getTime()||`Died because ${e}-${n}-${o} is in the past`}const creator=()=>{const t=new Set(o());return{postcssPlugin:"postcss-todo-or-die",Once(o,{result:r}){o.walkAtRules((o=>{if("todo-or-die"!==o.name.toLowerCase())return;if(!o.params.trim())throw o.error("Rule must have valid params");const errorHandler=e=>{throw o.error(e.message)},s=e.tokenizer({css:o.params},{onParseError:errorHandler}),i=[];for(;!s.endOfFile();)i.push(s.nextToken());i.push(s.nextToken());const a=n.parseCommaSeparatedListOfComponentValues(i,{onParseError:errorHandler});if(a.length){for(let e=0;e<a.length;e++){const s=a[e].filter((e=>!n.isWhitespaceNode(e)&&!n.isCommentNode(e)));if(1!==s.length)return void o.warn(r,"Conditions must be split by commas when adding multiple in a list.");if(!n.isFunctionNode(s[0]))return void o.warn(r,"Conditions must be one of the supported functions.");switch(s[0].name[4].value.toLowerCase()){case"if":{const e=parseIfCondition(s[0]);if(!e)return void o.warn(r,"Incorrect arguments in `if()` function.");const n=matchIfCondition(e);if(died(n))throw o.error(n);break}case"not":{const e=parseNotCondition(s[0]);if(!e)return void o.warn(r,"Incorrect arguments in `not()` function.");const n=matchNotCondition(e);if(died(n))throw o.error(n);break}case"browserslist":{const e=parseBrowserslistCondition(s[0]);if(!e)return void o.warn(r,"Incorrect arguments in `browserslist()` function.");const n=matchBrowserslistCondition(e,t);if(died(n))throw o.error(n);break}case"before-date":{const e=parseBeforeDateCondition(s[0]);if(!e)return void o.warn(r,"Incorrect arguments in `before-date()` function.");const n=matchBeforeDateCondition(e.year,e.month,e.day);if(died(n))throw o.error(n);break}}}o.nodes&&o.nodes.length?o.replaceWith(o.nodes):o.remove()}else o.warn(r,"Rule must have some valid params.")}))}}};creator.postcss=!0,module.exports=creator;
