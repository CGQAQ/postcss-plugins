import{tokenizer as o,TokenType as t,stringify as e}from"@csstools/css-tokenizer";function transform(n,s){{const o=n.toLowerCase();if(!o.includes("vb")&&!o.includes("vi"))return n}const i=o({css:n}),r=[];let c=!1;for(;;){const o=i.nextToken();if(r.push(o),o[0]===t.EOF)break;if(o[0]!==t.Dimension)continue;const e=s[o[4].unit.toLowerCase()];e&&(o[1]=o[4].value.toString()+e,o[4].unit=e,c=!0)}return c?e(...r):n}const creator=o=>{const t=Object.assign({writingMode:"horizontal",preserve:!0},o);"vertical"!==t.writingMode&&(t.writingMode="horizontal");const e="horizontal"===t.writingMode?{vi:"vw",vb:"vh"}:{vi:"vh",vb:"vw"};return{postcssPlugin:"postcss-logical-viewport-units",Declaration(o){const n=transform(o.value,e);n!==o.value&&(o.cloneBefore({value:n}),t.preserve||o.remove())}}};creator.postcss=!0;export{creator as default};
