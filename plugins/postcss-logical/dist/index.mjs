import t from"postcss-value-parser";var n,e;!function(t){t.Block="block",t.Inline="inline"}(n||(n={})),function(t){t.Start="start",t.End="end"}(e||(e={}));const o={BlockStart:`${n.Block}-${e.Start}`,BlockEnd:`${n.Block}-${e.End}`,InlineStart:`${n.Inline}-${e.Start}`,InlineEnd:`${n.Inline}-${e.End}`};var r,i;function hasKeyframesAtRuleAncestor(t){let n=t.parent;for(;n;)if("atrule"===n.type){if("keyframes"===t.parent.name.toLowerCase())return!0;n=n.parent}else n=n.parent;return!1}function cloneDeclaration(t,n,e){return t.cloneBefore({value:n,prop:e})}function transformLogicalSize(n){return e=>{const{value:o}=e,r=t(o),i=n.inlineIsHorizontal?"width":"height",l=n.inlineIsHorizontal?"height":"width",a="block-size"===e.prop?l:i;return cloneDeclaration(e,r.toString(),a),!0}}function transformOffset(t){return n=>(cloneDeclaration(n,n.value,t),!0)}function transformOffsetShorthand(n){return e=>{const o=t(e.value).nodes.filter((t=>"space"!==t.type));if(o.length>2){const t=`[postcss-logical] Invalid number of values for ${e.prop}. Found ${o.length} values, expected 1 or 2.`;throw new Error(t)}const[r,i]=n;let l,a;return 1===o.length&&(l=t.stringify(o[0]),a=t.stringify(o[0])),2===o.length&&(l=t.stringify(o[0]),a=t.stringify(o[1])),cloneDeclaration(e,l,r),cloneDeclaration(e,a,i),!0}}function transformResize(n){return e=>{const{prop:o,value:r}=e,i=t(r),l=n.inlineIsHorizontal?"horizontal":"vertical",a=n.inlineIsHorizontal?"vertical":"horizontal";i.nodes.forEach((t=>{const n=t.value.toLowerCase();if("word"===t.type){if("inline"===n)return void(t.value=l);"block"===n&&(t.value=a)}}));const s=i.toString()!==r;return s&&cloneDeclaration(e,i.toString(),o),s}}function transformSide(t,n){return e=>(cloneDeclaration(e,e.value,`${t}-${n}`),!0)}function transformSideShorthand(n,e){return o=>{const r=t(o.value).nodes.filter((t=>"space"!==t.type));if(r.length>2){const t=`[postcss-logical] Invalid number of values for ${o.prop}. Found ${r.length} values, expected 1 or 2.`;throw new Error(t)}const[i,l]=e;let a,s;return 1===r.length&&(a=t.stringify(r[0]),s=t.stringify(r[0])),2===r.length&&(a=t.stringify(r[0]),s=t.stringify(r[1])),cloneDeclaration(o,a,`${n}-${i}`),cloneDeclaration(o,s,`${n}-${l}`),!0}}function logicalToPhysical(t,n){const[e,r]=n.block,[i,l]=n.inline;switch(t){case o.BlockStart:return e;case o.BlockEnd:return r;case o.InlineStart:return i;case o.InlineEnd:return l}}function doTransform(n,e,o){const{prop:r,value:i}=n,l=t(i);return l.nodes.forEach((t=>{const n=t.value.toLowerCase();return"word"===t.type&&e.includes(n)&&(t.value=logicalToPhysical(n,o)),t})),l.toString()!==i&&(n.cloneBefore({prop:r,value:l.toString()}),!0)}function transformValueWithSingleDirection(t,e){return r=>{let i;return i=t===n.Block?[o.BlockStart,o.BlockEnd]:[o.InlineStart,o.InlineEnd],doTransform(r,i,e)}}function directionFlowToAxes(t){switch(t){case r.TopToBottom:return[i.Top,i.Bottom];case r.BottomToTop:return[i.Bottom,i.Top];case r.RightToLeft:return[i.Right,i.Left];case r.LeftToRight:return[i.Left,i.Right]}}!function(t){t.TopToBottom="top-to-bottom",t.BottomToTop="bottom-to-top",t.RightToLeft="right-to-left",t.LeftToRight="left-to-right"}(r||(r={})),function(t){t.Top="top",t.Right="right",t.Bottom="bottom",t.Left="left"}(i||(i={}));const creator=l=>{const a=Object.assign({preserve:!1,blockDirection:r.TopToBottom,inlineDirection:r.LeftToRight},l),s=Object.values(r);if(!s.includes(a.blockDirection))throw new Error(`[postcss-logical] "blockDirection" must be one of ${s.join(", ")}`);if(!s.includes(a.inlineDirection))throw new Error(`[postcss-logical] "inlineDirection" must be one of ${s.join(", ")}`);const[c,f]=directionFlowToAxes(a.blockDirection),[g,u]=directionFlowToAxes(a.inlineDirection);if(!Object.values(i).every((t=>[c,f,g,u].includes(t))))throw new Error('[postcss-logical] "blockDirection" and "inlineDirection" must be on separate axes');const d={block:[c,f],inline:[g,u],inlineIsHorizontal:[r.LeftToRight,r.RightToLeft].includes(a.inlineDirection)},makeTransform=t=>(n,{result:e})=>{if(!t||hasKeyframesAtRuleAncestor(n))return;const o=n.parent;let r=!1;try{r=t(n)}catch(t){n.warn(e,t.message)}r&&(a.preserve||n.remove(),o.nodes.length||o.remove())};return{postcssPlugin:"postcss-logical",Declaration:{"caption-side":makeTransform((h=d,t=>doTransform(t,Object.values(o),h))),float:makeTransform(d.inlineIsHorizontal?transformValueWithSingleDirection(n.Inline,d):null),clear:makeTransform(d.inlineIsHorizontal?transformValueWithSingleDirection(n.Inline,d):null),"text-align":makeTransform(d.inlineIsHorizontal?(p=d.inline,n=>{const{prop:o,value:r}=n,i=t(r),[l,a]=p;i.nodes.forEach((t=>{const n=t.value.toLowerCase();if("word"===t.type){if(n===e.End)return void(t.value=a);n===e.Start&&(t.value=l)}}));const s=i.toString()!==r;return s&&cloneDeclaration(n,i.toString(),o),s}):null),resize:makeTransform(transformResize(d)),"block-size":makeTransform(transformLogicalSize(d)),"inline-size":makeTransform(transformLogicalSize(d)),"margin-block-start":makeTransform(transformSide("margin",c)),"margin-block-end":makeTransform(transformSide("margin",f)),"margin-inline-start":makeTransform(transformSide("margin",g)),"margin-inline-end":makeTransform(transformSide("margin",u)),"margin-block":makeTransform(transformSideShorthand("margin",[c,f])),"margin-inline":makeTransform(transformSideShorthand("margin",[g,u])),"inset-block":makeTransform(transformOffsetShorthand([c,f])),"inset-block-start":makeTransform(transformOffset(c)),"inset-block-end":makeTransform(transformOffset(f)),"inset-inline":makeTransform(transformOffsetShorthand([g,u])),"inset-inline-start":makeTransform(transformOffset(g)),"inset-inline-end":makeTransform(transformOffset(u)),inset:makeTransform((n=>{const e=t(n.value).nodes.filter((t=>"space"!==t.type));if(e.length>4){const t=`[postcss-logical] Invalid number of values for ${n.prop}. Found ${e.length} values, expected up to 4 values.`;throw new Error(t)}const o={top:"",right:"",bottom:"",left:""};return 1===e.length&&(o.top=t.stringify(e[0]),o.right=t.stringify(e[0]),o.bottom=t.stringify(e[0]),o.left=t.stringify(e[0])),2===e.length&&(o.top=t.stringify(e[0]),o.right=t.stringify(e[1]),o.bottom=t.stringify(e[0]),o.left=t.stringify(e[1])),3===e.length&&(o.top=t.stringify(e[0]),o.right=t.stringify(e[1]),o.left=t.stringify(e[1]),o.bottom=t.stringify(e[2])),4===e.length&&(o.top=t.stringify(e[0]),o.right=t.stringify(e[1]),o.bottom=t.stringify(e[2]),o.left=t.stringify(e[3])),Object.keys(o).forEach((t=>{cloneDeclaration(n,o[t],t)})),!0})),"padding-block-start":makeTransform(transformSide("padding",c)),"padding-block-end":makeTransform(transformSide("padding",f)),"padding-inline-start":makeTransform(transformSide("padding",g)),"padding-inline-end":makeTransform(transformSide("padding",u)),"padding-block":makeTransform(transformSideShorthand("padding",[c,f])),"padding-inline":makeTransform(transformSideShorthand("padding",[g,u]))}};var p,h};creator.postcss=!0;export{creator as default};
