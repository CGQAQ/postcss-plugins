import r from"postcss-value-parser";var o,t;!function(r){r.Block="block",r.Inline="inline"}(o||(o={})),function(r){r.Start="start",r.End="end"}(t||(t={}));const e={BlockStart:`${o.Block}-${t.Start}`,BlockEnd:`${o.Block}-${t.End}`,InlineStart:`${o.Inline}-${t.Start}`,InlineEnd:`${o.Inline}-${t.End}`};var n,i;function hasKeyframesAtRuleAncestor(r){let o=r.parent;for(;o;)if("atrule"===o.type){if("keyframes"===r.parent.name.toLowerCase())return!0;o=o.parent}else o=o.parent;return!1}function cloneDeclaration(r,o,t){return r.cloneBefore({value:o,prop:t})}function parseValueCouple(o){const t=r(o.value).nodes.filter((r=>"space"!==r.type));if(t.length>2){const r=`[postcss-logical] Invalid number of values for ${o.prop}. Found ${t.length} values, expected 1 or 2.`;throw new Error(r)}let e,n;return 1===t.length&&(e=r.stringify(t[0]),n=r.stringify(t[0])),2===t.length&&(e=r.stringify(t[0]),n=r.stringify(t[1])),[e,n]}function transformBorder(r,o){return t=>(cloneDeclaration(t,t.value,`border-${o}-${r}`),!0)}function transformBorderProperty(r,o){return t=>{const[e,n]=o,[i,a]=parseValueCouple(t);return cloneDeclaration(t,i,`border-${e}-${r}`),cloneDeclaration(t,a,`border-${n}-${r}`),!0}}function transformBorderShorthand(r){return o=>(r.forEach((r=>cloneDeclaration(o,o.value,`border-${r}`))),!0)}function transformBorderRadius(r,o){return t=>{let e;switch(t.prop.toLowerCase()){case"border-start-start-radius":e=`border-top-${r}-radius`;break;case"border-start-end-radius":e=`border-top-${o}-radius`;break;case"border-end-start-radius":e=`border-bottom-${r}-radius`;break;case"border-end-end-radius":e=`border-bottom-${o}-radius`}return cloneDeclaration(t,t.value,e),!0}}function transformLogicalSize(o){return t=>{const{value:e}=t,n=r(e),i=o.inlineIsHorizontal?"width":"height",a=o.inlineIsHorizontal?"height":"width",s="block-size"===t.prop?a:i;return cloneDeclaration(t,n.toString(),s),!0}}function transformOffset(r){return o=>(cloneDeclaration(o,o.value,r),!0)}function transformOffsetShorthand(r){return o=>{const[t,e]=r,[n,i]=parseValueCouple(o);return cloneDeclaration(o,n,t),cloneDeclaration(o,i,e),!0}}function transformResize(o){return t=>{const{prop:e,value:n}=t,i=r(n),a=o.inlineIsHorizontal?"horizontal":"vertical",s=o.inlineIsHorizontal?"vertical":"horizontal";i.nodes.forEach((r=>{const o=r.value.toLowerCase();if("word"===r.type){if("inline"===o)return void(r.value=a);"block"===o&&(r.value=s)}}));const l=i.toString()!==n;return l&&cloneDeclaration(t,i.toString(),e),l}}function transformSide(r,o){return t=>(cloneDeclaration(t,t.value,`${r}-${o}`),!0)}function transformSideShorthand(r,o){return t=>{const[e,n]=o,[i,a]=parseValueCouple(t);return cloneDeclaration(t,i,`${r}-${e}`),cloneDeclaration(t,a,`${r}-${n}`),!0}}function logicalToPhysical(r,o){const[t,n]=o.block,[i,a]=o.inline;switch(r){case e.BlockStart:return t;case e.BlockEnd:return n;case e.InlineStart:return i;case e.InlineEnd:return a}}function doTransform(o,t,e){const{prop:n,value:i}=o,a=r(i);return a.nodes.forEach((r=>{const o=r.value.toLowerCase();return"word"===r.type&&t.includes(o)&&(r.value=logicalToPhysical(o,e)),r})),a.toString()!==i&&(o.cloneBefore({prop:n,value:a.toString()}),!0)}function transformValueWithSingleDirection(r,t){return n=>{let i;return i=r===o.Block?[e.BlockStart,e.BlockEnd]:[e.InlineStart,e.InlineEnd],doTransform(n,i,t)}}function directionFlowToAxes(r){switch(r){case n.TopToBottom:return[i.Top,i.Bottom];case n.BottomToTop:return[i.Bottom,i.Top];case n.RightToLeft:return[i.Right,i.Left];case n.LeftToRight:return[i.Left,i.Right]}}!function(r){r.TopToBottom="top-to-bottom",r.BottomToTop="bottom-to-top",r.RightToLeft="right-to-left",r.LeftToRight="left-to-right"}(n||(n={})),function(r){r.Top="top",r.Right="right",r.Bottom="bottom",r.Left="left"}(i||(i={}));const creator=a=>{const s=Object.assign({preserve:!1,blockDirection:n.TopToBottom,inlineDirection:n.LeftToRight},a),l=Object.values(n);if(!l.includes(s.blockDirection))throw new Error(`[postcss-logical] "blockDirection" must be one of ${l.join(", ")}`);if(!l.includes(s.inlineDirection))throw new Error(`[postcss-logical] "inlineDirection" must be one of ${l.join(", ")}`);const[d,c]=directionFlowToAxes(s.blockDirection),[f,u]=directionFlowToAxes(s.inlineDirection);if(!Object.values(i).every((r=>[d,c,f,u].includes(r))))throw new Error('[postcss-logical] "blockDirection" and "inlineDirection" must be on separate axes');const m={block:[d,c],inline:[f,u],inlineIsHorizontal:[n.LeftToRight,n.RightToLeft].includes(s.inlineDirection)},makeTransform=r=>(o,{result:t})=>{if(!r||hasKeyframesAtRuleAncestor(o))return;const e=o.parent;let n=!1;try{n=r(o)}catch(r){o.warn(t,r.message)}n&&(s.preserve||o.remove(),e.nodes.length||e.remove())},g=[d,c],h=[f,u],b=m.inlineIsHorizontal?[f,u]:[d,c];return{postcssPlugin:"postcss-logical",Declaration:{"caption-side":makeTransform((y=m,r=>doTransform(r,Object.values(e),y))),float:makeTransform(m.inlineIsHorizontal?transformValueWithSingleDirection(o.Inline,m):null),clear:makeTransform(m.inlineIsHorizontal?transformValueWithSingleDirection(o.Inline,m):null),"text-align":makeTransform(m.inlineIsHorizontal?(p=m.inline,o=>{const{prop:e,value:n}=o,i=r(n),[a,s]=p;i.nodes.forEach((r=>{const o=r.value.toLowerCase();if("word"===r.type){if(o===t.End)return void(r.value=s);o===t.Start&&(r.value=a)}}));const l=i.toString()!==n;return l&&cloneDeclaration(o,i.toString(),e),l}):null),resize:makeTransform(transformResize(m)),"block-size":makeTransform(transformLogicalSize(m)),"inline-size":makeTransform(transformLogicalSize(m)),"margin-block-start":makeTransform(transformSide("margin",d)),"margin-block-end":makeTransform(transformSide("margin",c)),"margin-inline-start":makeTransform(transformSide("margin",f)),"margin-inline-end":makeTransform(transformSide("margin",u)),"margin-block":makeTransform(transformSideShorthand("margin",g)),"margin-inline":makeTransform(transformSideShorthand("margin",[f,u])),"inset-block":makeTransform(transformOffsetShorthand(g)),"inset-block-start":makeTransform(transformOffset(d)),"inset-block-end":makeTransform(transformOffset(c)),"inset-inline":makeTransform(transformOffsetShorthand([f,u])),"inset-inline-start":makeTransform(transformOffset(f)),"inset-inline-end":makeTransform(transformOffset(u)),inset:makeTransform((o=>{const t=r(o.value).nodes.filter((r=>"space"!==r.type));if(t.length>4){const r=`[postcss-logical] Invalid number of values for ${o.prop}. Found ${t.length} values, expected up to 4 values.`;throw new Error(r)}const e={top:"",right:"",bottom:"",left:""};return 1===t.length&&(e.top=r.stringify(t[0]),e.right=r.stringify(t[0]),e.bottom=r.stringify(t[0]),e.left=r.stringify(t[0])),2===t.length&&(e.top=r.stringify(t[0]),e.right=r.stringify(t[1]),e.bottom=r.stringify(t[0]),e.left=r.stringify(t[1])),3===t.length&&(e.top=r.stringify(t[0]),e.right=r.stringify(t[1]),e.left=r.stringify(t[1]),e.bottom=r.stringify(t[2])),4===t.length&&(e.top=r.stringify(t[0]),e.right=r.stringify(t[1]),e.bottom=r.stringify(t[2]),e.left=r.stringify(t[3])),Object.keys(e).forEach((r=>{cloneDeclaration(o,e[r],r)})),!0})),"padding-block-start":makeTransform(transformSide("padding",d)),"padding-block-end":makeTransform(transformSide("padding",c)),"padding-inline-start":makeTransform(transformSide("padding",f)),"padding-inline-end":makeTransform(transformSide("padding",u)),"padding-block":makeTransform(transformSideShorthand("padding",g)),"padding-inline":makeTransform(transformSideShorthand("padding",[f,u])),"border-block-start-width":makeTransform(transformBorder("width",d)),"border-block-end-width":makeTransform(transformBorder("width",c)),"border-inline-start-width":makeTransform(transformBorder("width",f)),"border-inline-end-width":makeTransform(transformBorder("width",u)),"border-block-width":makeTransform(transformBorderProperty("width",g)),"border-inline-width":makeTransform(transformBorderProperty("width",h)),"border-block-start-style":makeTransform(transformBorder("style",d)),"border-block-end-style":makeTransform(transformBorder("style",c)),"border-inline-start-style":makeTransform(transformBorder("style",f)),"border-inline-end-style":makeTransform(transformBorder("style",u)),"border-block-style":makeTransform(transformBorderProperty("style",g)),"border-inline-style":makeTransform(transformBorderProperty("style",h)),"border-block-start-color":makeTransform(transformBorder("color",d)),"border-block-end-color":makeTransform(transformBorder("color",c)),"border-inline-start-color":makeTransform(transformBorder("color",f)),"border-inline-end-color":makeTransform(transformBorder("color",u)),"border-block-color":makeTransform(transformBorderProperty("color",g)),"border-inline-color":makeTransform(transformBorderProperty("color",h)),"border-block":makeTransform(transformBorderShorthand(g)),"border-block-start":makeTransform(transformBorderShorthand([d])),"border-block-end":makeTransform(transformBorderShorthand([c])),"border-inline":makeTransform(transformBorderShorthand(h)),"border-inline-start":makeTransform(transformBorderShorthand([f])),"border-inline-end":makeTransform(transformBorderShorthand([u])),"border-start-start-radius":makeTransform(transformBorderRadius(...b)),"border-start-end-radius":makeTransform(transformBorderRadius(...b)),"border-end-start-radius":makeTransform(transformBorderRadius(...b)),"border-end-end-radius":makeTransform(transformBorderRadius(...b))}};var p,y};creator.postcss=!0;export{creator as default};
