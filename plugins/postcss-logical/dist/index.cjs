"use strict";var t,n,e=require("postcss-value-parser");!function(t){t.Block="block",t.Inline="inline"}(t||(t={})),function(t){t.Start="start",t.End="end"}(n||(n={}));const o={BlockStart:`${t.Block}-${n.Start}`,BlockEnd:`${t.Block}-${n.End}`,InlineStart:`${t.Inline}-${n.Start}`,InlineEnd:`${t.Inline}-${n.End}`};var r,i;function hasKeyframesAtRuleAncestor(t){let n=t.parent;for(;n;)if("atrule"===n.type){if("keyframes"===t.parent.name.toLowerCase())return!0;n=n.parent}else n=n.parent;return!1}function cloneDeclaration(t,n,e){return t.cloneBefore({value:n,prop:e})}function transformLogicalSize(t){return n=>{const{value:o}=n,r=e(o),i=t.inlineIsHorizontal?"width":"height",l=t.inlineIsHorizontal?"height":"width",s="block-size"===n.prop?l:i;return cloneDeclaration(n,r.toString(),s),!0}}function transformOffset(t){return n=>(cloneDeclaration(n,n.value,t),!0)}function transformOffsetShorthand(t){return n=>{const o=e(n.value).nodes.filter((t=>"space"!==t.type));if(o.length>2){const t=`[postcss-logical] Invalid number of values for ${n.prop}. Found ${o.length} values, expected 1 or 2.`;throw new Error(t)}const[r,i]=t;let l,s;return 1===o.length&&(l=e.stringify(o[0]),s=e.stringify(o[0])),2===o.length&&(l=e.stringify(o[0]),s=e.stringify(o[1])),cloneDeclaration(n,l,r),cloneDeclaration(n,s,i),!0}}function transformResize(t){return n=>{const{prop:o,value:r}=n,i=e(r),l=t.inlineIsHorizontal?"horizontal":"vertical",s=t.inlineIsHorizontal?"vertical":"horizontal";i.nodes.forEach((t=>{const n=t.value.toLowerCase();if("word"===t.type){if("inline"===n)return void(t.value=l);"block"===n&&(t.value=s)}}));const a=i.toString()!==r;return a&&cloneDeclaration(n,i.toString(),o),a}}function transformSide(t,n){return e=>(cloneDeclaration(e,e.value,`${t}-${n}`),!0)}function transformSideShorthand(t,n){return o=>{const r=e(o.value).nodes.filter((t=>"space"!==t.type));if(r.length>2){const t=`[postcss-logical] Invalid number of values for ${o.prop}. Found ${r.length} values, expected 1 or 2.`;throw new Error(t)}const[i,l]=n;let s,a;return 1===r.length&&(s=e.stringify(r[0]),a=e.stringify(r[0])),2===r.length&&(s=e.stringify(r[0]),a=e.stringify(r[1])),cloneDeclaration(o,s,`${t}-${i}`),cloneDeclaration(o,a,`${t}-${l}`),!0}}function logicalToPhysical(t,n){const[e,r]=n.block,[i,l]=n.inline;switch(t){case o.BlockStart:return e;case o.BlockEnd:return r;case o.InlineStart:return i;case o.InlineEnd:return l}}function doTransform(t,n,o){const{prop:r,value:i}=t,l=e(i);return l.nodes.forEach((t=>{const e=t.value.toLowerCase();return"word"===t.type&&n.includes(e)&&(t.value=logicalToPhysical(e,o)),t})),l.toString()!==i&&(t.cloneBefore({prop:r,value:l.toString()}),!0)}function transformValueWithSingleDirection(n,e){return r=>{let i;return i=n===t.Block?[o.BlockStart,o.BlockEnd]:[o.InlineStart,o.InlineEnd],doTransform(r,i,e)}}function directionFlowToAxes(t){switch(t){case r.TopToBottom:return[i.Top,i.Bottom];case r.BottomToTop:return[i.Bottom,i.Top];case r.RightToLeft:return[i.Right,i.Left];case r.LeftToRight:return[i.Left,i.Right]}}!function(t){t.TopToBottom="top-to-bottom",t.BottomToTop="bottom-to-top",t.RightToLeft="right-to-left",t.LeftToRight="left-to-right"}(r||(r={})),function(t){t.Top="top",t.Right="right",t.Bottom="bottom",t.Left="left"}(i||(i={}));const creator=l=>{const s=Object.assign({preserve:!1,blockDirection:r.TopToBottom,inlineDirection:r.LeftToRight},l),a=Object.values(r);if(!a.includes(s.blockDirection))throw new Error(`[postcss-logical] "blockDirection" must be one of ${a.join(", ")}`);if(!a.includes(s.inlineDirection))throw new Error(`[postcss-logical] "inlineDirection" must be one of ${a.join(", ")}`);const[c,f]=directionFlowToAxes(s.blockDirection),[g,u]=directionFlowToAxes(s.inlineDirection);if(!Object.values(i).every((t=>[c,f,g,u].includes(t))))throw new Error('[postcss-logical] "blockDirection" and "inlineDirection" must be on separate axes');const d={block:[c,f],inline:[g,u],inlineIsHorizontal:[r.LeftToRight,r.RightToLeft].includes(s.inlineDirection)},makeTransform=t=>(n,{result:e})=>{if(!t||hasKeyframesAtRuleAncestor(n))return;const o=n.parent;let r=!1;try{r=t(n)}catch(t){n.warn(e,t.message)}r&&(s.preserve||n.remove(),o.nodes.length||o.remove())};return{postcssPlugin:"postcss-logical",Declaration:{"caption-side":makeTransform((h=d,t=>doTransform(t,Object.values(o),h))),float:makeTransform(d.inlineIsHorizontal?transformValueWithSingleDirection(t.Inline,d):null),clear:makeTransform(d.inlineIsHorizontal?transformValueWithSingleDirection(t.Inline,d):null),"text-align":makeTransform(d.inlineIsHorizontal?(p=d.inline,t=>{const{prop:o,value:r}=t,i=e(r),[l,s]=p;i.nodes.forEach((t=>{const e=t.value.toLowerCase();if("word"===t.type){if(e===n.End)return void(t.value=s);e===n.Start&&(t.value=l)}}));const a=i.toString()!==r;return a&&cloneDeclaration(t,i.toString(),o),a}):null),resize:makeTransform(transformResize(d)),"block-size":makeTransform(transformLogicalSize(d)),"inline-size":makeTransform(transformLogicalSize(d)),"margin-block-start":makeTransform(transformSide("margin",c)),"margin-block-end":makeTransform(transformSide("margin",f)),"margin-inline-start":makeTransform(transformSide("margin",g)),"margin-inline-end":makeTransform(transformSide("margin",u)),"margin-block":makeTransform(transformSideShorthand("margin",[c,f])),"margin-inline":makeTransform(transformSideShorthand("margin",[g,u])),"inset-block":makeTransform(transformOffsetShorthand([c,f])),"inset-block-start":makeTransform(transformOffset(c)),"inset-block-end":makeTransform(transformOffset(f)),"inset-inline":makeTransform(transformOffsetShorthand([g,u])),"inset-inline-start":makeTransform(transformOffset(g)),"inset-inline-end":makeTransform(transformOffset(u)),inset:makeTransform((t=>{const n=e(t.value).nodes.filter((t=>"space"!==t.type));if(n.length>4){const e=`[postcss-logical] Invalid number of values for ${t.prop}. Found ${n.length} values, expected up to 4 values.`;throw new Error(e)}const o={top:"",right:"",bottom:"",left:""};return 1===n.length&&(o.top=e.stringify(n[0]),o.right=e.stringify(n[0]),o.bottom=e.stringify(n[0]),o.left=e.stringify(n[0])),2===n.length&&(o.top=e.stringify(n[0]),o.right=e.stringify(n[1]),o.bottom=e.stringify(n[0]),o.left=e.stringify(n[1])),3===n.length&&(o.top=e.stringify(n[0]),o.right=e.stringify(n[1]),o.left=e.stringify(n[1]),o.bottom=e.stringify(n[2])),4===n.length&&(o.top=e.stringify(n[0]),o.right=e.stringify(n[1]),o.bottom=e.stringify(n[2]),o.left=e.stringify(n[3])),Object.keys(o).forEach((n=>{cloneDeclaration(t,o[n],n)})),!0})),"padding-block-start":makeTransform(transformSide("padding",c)),"padding-block-end":makeTransform(transformSide("padding",f)),"padding-inline-start":makeTransform(transformSide("padding",g)),"padding-inline-end":makeTransform(transformSide("padding",u)),"padding-block":makeTransform(transformSideShorthand("padding",[c,f])),"padding-inline":makeTransform(transformSideShorthand("padding",[g,u]))}};var p,h};creator.postcss=!0,module.exports=creator;
